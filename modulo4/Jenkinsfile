pipeline {
    // 1. Agente de Ejecución
    // Se usará una imagen de Docker con Node.js. Se instalará Python manualmente.
    agent {
        docker {
            image 'node:22'
            args '-u root:root'
        }
    }

    stages {
        // 2. Etapa de Configuración del Entorno
        // Instala Python, pip y otras herramientas necesarias.
        stage('Setup Environment') {
            steps {
                script {
                    try {
                        sh 'apt-get update && apt-get install -y python3 python3-pip curl'
                        sh 'python3 --version'
                        sh 'pip --version'
                    } catch (Exception e) {
                        error "Error setting up the environment: ${e.getMessage()}"
                    }
                }
            }
        }

        // 3. Etapa de Instalación de Dependencias
        // Instala las dependencias de todos los módulos en paralelo.
        stage('Install Dependencies') {
            parallel {
                // Instala dependencias para el Módulo 1
                stage('Module 1 - JS Deps') {
                    steps {
                        dir('modulo1') {
                            sh 'npm install'
                            sh 'npx playwright install --with-deps'
                        }
                    }
                }
                // Instala dependencias para el Módulo 2
                stage('Module 2 - JS Deps') {
                    steps {
                        dir('modulo2') {
                            sh 'npm install'
                            sh 'npx playwright install --with-deps'
                        }
                    }
                }
                // Instala dependencias para el Módulo 3
                stage('Module 3 - JS Deps') {
                    steps {
                        dir('modulo3') {
                            sh 'npm install'
                            sh 'npx playwright install --with-deps'
                        }
                    }
                }
                // Instala dependencias para el Módulo 4
                stage('Module 4 - Python Deps') {
                    steps {
                        dir('modulo4') {
                            sh "pip install -r requirements.txt" //
                        }
                    }
                }
            }
        }

        // 4. Etapa para Iniciar Servidores
        // Levanta el servidor HTTP para las pruebas de JS y la API de Flask para las pruebas de Python.
        stage('Start Servers') {
            parallel {
                stage('Start HTTP Server') {
                    steps {
                        sh 'npm install -g http-server'
                        sh 'nohup http-server -p 5500 > http-server.log 2>&1 & echo $! > http-server.pid'
                        echo "HTTP Server starting..."
                    }
                }
                stage('Start Flask API Server') {
                    steps {
                        dir('modulo4') {
                            sh 'nohup python3 app.py > ../flask-api.log 2>&1 & echo $! > ../flask-api.pid' //
                            echo "Flask API Server starting..."
                        }
                    }
                }
            }
        }

        // 5. Etapa para Esperar que los Servidores esten listos
        // Se asegura de que ambos servidores estén aceptando peticiones antes de continuar.
        stage('Wait for Servers') {
            parallel {
                stage('Wait for HTTP Server') {
                    steps {
                        // Espera un máximo de 2 minutos
                        timeout(time: 2, unit: 'MINUTES') {
                            sh 'while ! curl -s http://127.0.0.1:5500; do echo "Waiting for HTTP server..."; sleep 2; done'
                            echo "HTTP Server is ready!"
                        }
                    }
                }
                stage('Wait for Flask API Server') {
                    steps {
                        // Espera un máximo de 2 minutos
                        timeout(time: 2, unit: 'MINUTES') {
                            sh 'while ! curl -s http://127.0.0.1:5000/resources; do echo "Waiting for Flask API server..."; sleep 2; done'
                            echo "Flask API Server is ready!"
                        }
                    }
                }
            }
        }

        // 6. Etapa de Ejecución de Pruebas
        // Ejecuta todas las suites de pruebas en paralelo.
        stage('Run Tests') {
            parallel {
                stage('Run Playwright Tests - Module 1') {
                    steps {
                        dir('modulo1') {
                            sh 'npx playwright test'
                        }
                    }
                }
                stage('Run Playwright Tests - Module 2') {
                    steps {
                        dir('modulo2') {
                            sh 'npx playwright test --grep-invert "visual"'
                        }
                    }
                }
                stage('Run Playwright Tests - Module 3') {
                    steps {
                        dir('modulo3') {
                            sh 'npx playwright test --grep-invert "visual"'
                        }
                    }
                }
                stage('Run Pytest API Tests - Module 4') {
                    steps {
                        dir('modulo4') {
                            // Se usa el nombre de archivo corregido para que pytest lo encuentre
                            sh 'pytest tests/module4-api_tests.py' //
                        }
                    }
                }
            }
        }
    }

    // 7. Etapa Posterior a la Ejecución
    // Siempre se ejecuta, sin importar si las pruebas fallaron o no.
    // Detiene los servidores, publica los reportes y limpia el espacio de trabajo.
    post {
        always {
            script {
                // Detener ambos servidores
                sh '''
                    if [ -f http-server.pid ]; then
                        echo "Stopping HTTP Server..."
                        kill $(cat http-server.pid) || true
                        rm http-server.pid
                    fi
                    if [ -f flask-api.pid ]; then
                        echo "Stopping Flask API Server..."
                        kill $(cat flask-api.pid) || true
                        rm flask-api.pid
                    fi
                '''
            }
            // Publicar los reportes HTML de Playwright de cada módulo
            publishHTML([
                allowMissing: true, reportDir: 'modulo1/playwright-report', reportFiles: 'index.html', reportName: 'Reporte Playwright - Modulo 1'
            ])
            publishHTML([
                allowMissing: true, reportDir: 'modulo2/playwright-report', reportFiles: 'index.html', reportName: 'Reporte Playwright - Modulo 2'
            ])
            publishHTML([
                allowMissing: true, reportDir: 'modulo3/playwright-report', reportFiles: 'index.html', reportName: 'Reporte Playwright - Modulo 3'
            ])
            // Limpiar el espacio de trabajo
            cleanWs()
        }
    }
}