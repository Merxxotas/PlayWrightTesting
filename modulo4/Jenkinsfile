pipeline {
    // 1. Agente de Ejecución: Usamos una imagen oficial de Python
    agent {
        docker {
            image 'python:3.12-slim'
            args '-u root:root'
        }
    }

    stages {
        // 2. Etapa de Configuración del Entorno
        stage('Setup Environment') {
            steps {
                script {
                    try {
                        // El contenedor ya tiene python y pip. Solo instalamos curl para las verificaciones.
                        sh 'apt-get update && apt-get install -y curl'
                        sh 'python3 --version'
                        sh 'pip --version'
                    } catch (Exception e) {
                        error "Error setting up the environment: ${e.getMessage()}"
                    }
                }
            }
        }

        // 3. Etapa de Instalación de Dependencias de Python
        stage('Install Python Dependencies') {
            steps {
                // Nos movemos al directorio del módulo 4 para instalar las dependencias
                dir('modulo4') {
                    sh "pip install -r requirements.txt --break-system-packages"
                }
            }
        }

        // 4. Etapa para Iniciar el Servidor API de Flask
        stage('Start Flask API Server') {
            steps {
                dir('modulo4') {
                    // Iniciamos el servidor en segundo plano y guardamos su PID
                    sh 'nohup python3 app.py > ../flask-api.log 2>&1 & echo $! > ../flask-api.pid'
                    echo "Flask API Server starting..."
                }
            }
        }

        // 5. Etapa para Esperar que el Servidor esté listo
        stage('Wait for Flask API Server') {
            steps {
                // Esperamos un máximo de 2 minutos a que el servidor responda
                timeout(time: 2, unit: 'MINUTES') {
                    sh 'while ! curl -s http://127.0.0.1:5000/resources; do echo "Waiting for Flask API server..."; sleep 2; done'
                    echo "Flask API Server is ready!"
                }
            }
        }

        // 6. Etapa de Ejecución de Pruebas de Pytest
        stage('Run Pytest API Tests') {
            steps {
                dir('modulo4') {
                    // Ejecutamos pytest especificando el directorio de pruebas
                    sh 'pytest tests/'
                }
            }
        }
    }

    // 7. Etapa Posterior a la Ejecución (Limpieza)
    post {
        always {
            script {
                // Siempre nos aseguramos de detener el servidor
                sh '''
                    if [ -f flask-api.pid ]; then
                        echo "Stopping Flask API Server..."
                        kill $(cat flask-api.pid) || true
                        rm flask-api.pid
                    fi
                '''
            }
            // Limpiamos el espacio de trabajo al finalizar
            cleanWs()
        }
    }
}
