// Declaración de pipeline para Jenkins
pipeline{
    // Definimos el agente como un contenedor Docker con Node.js
    agent {
        docker {
            image 'node:22' // Imagen base de Node.js versión 22
            args '-u root:root' // Ejecutar como usuario root
        }
    }

    // Definimos las etapas del pipeline
    stages{
        // Etapa 1: Verificar la versión de Node.js instalada
        stage('Verificar la versión de node instalada') {
            steps {
                script{
                    try{
                        // Mostramos la versión de Node.js
                        sh 'node --version'
                    } catch (Exception e) {
                        error "Error verificando la versión de Node.js: ${e.getMessage()}"
                    }
                }
            }
        }

        // Etapa 2: Instalar Playwright y sus dependencias
        stage("Instalar Playwright") {
            steps {
                script {
                    try {
                        // Instalamos Playwright y sus dependencias
                        sh '''
                        npm i -D @playwright/test
                        npx playwright install
                        npx playwright install-deps
                        '''
                    } catch (Exception e) {
                        error "Error instalando Playwright: ${e.getMessage()}"
                    }
                }
            }
        }

        // Etapa 3: Enlistar todos los casos de prueba disponibles en Playwright
        stage ("Enlistar todos los casos de prueba") {
            steps {
                script{
                    try {
                        // Listamos los tests detectados por Playwright
                        sh '''
                        npx playwright test --list
                        '''
                    } catch (Exception e) {
                        error "Error obteniendo los casos de prueba bajo Playwright: ${e.getMessage()}"
                    }
                }
            }
        }

        // Etapa 4: Instalar el servidor HTTP globalmente
        stage("Instalar Http-server") {
            steps {
                script{
                    try{
                        // Instalamos el paquete http-server globalmente
                        sh 'npm install -g http-server'
                    } catch (Exception e) {
                        error "Error instalando Http-server: ${e.getMessage()}"
                    }
                }
            }
        }

        // Etapa 5: Iniciar el servidor HTTP en el puerto 5500
        stage("Iniciando el servidor HTTP en el puerto 5500") {
            steps {
                script {
                    try {
                        // Iniciamos el servidor en segundo plano y guardamos el PID
                        sh '''
                        nohup http-server -p 5500 > server.log 2>&1 &
                        echo $! > server.pid
                        echo "Servidor HTTP iniciado en puerto 5500"
                        '''
                    } catch (Exception e) {
                        error "Error iniciando el servidor HTTP: ${e.getMessage()}"
                    }
                }
            }
        }

        // Etapa 6: Esperar a que el servidor HTTP esté listo antes de continuar
        stage("Esperando por el servidor HTTP para iniciar") {
            steps {
                script {
                    try {
                        def maxRetries = 50 // Número máximo de intentos
                        def retryCount = 0 // Contador de intentos
                        def serverReady = false // Bandera de estado
                        // Intentamos conectarnos al servidor hasta que esté listo o se agoten los intentos
                        while (retryCount < maxRetries && !serverReady) {
                            echo "Intento ${retryCount + 1} de ${maxRetries} - Verificando servidor..."
                            def response = sh(script: 'curl -s http://127.0.0.1:5500', returnStatus: true) 
                            if (response == 0) {
                                serverReady = true
                                echo "¡Servidor HTTP listo en el puerto 5500!"
                            } else {
                                sleep(2) // Esperar 2 segundos entre intentos
                                retryCount++
                            }
                        }
                        // Si no se logra iniciar el servidor, lanzamos error
                        if (!serverReady) {
                            error "El servidor HTTP no se inició en el puerto 5500 después de ${maxRetries} intentos."
                        }
                    } catch (Exception e) {
                        error "Error esperando por el servidor HTTP: ${e.getMessage()}"
                    }
                }
            }
        }

        // Etapa 7: Ejecutar los tests de Playwright, excluyendo los visuales
        stage("Ejecutar Tests de Playwright (excluyendo visuales)") {
            steps {
                script {
                    try {
                        // Ejecutamos los tests, excluyendo los que contienen "visual" en el nombre
                        sh '''
                        npx playwright test --grep-invert "visual" --reporter=html
                        '''
                        echo "Tests de Playwright ejecutados exitosamente (excluyendo tests visuales)"
                    } catch (Exception e) {
                        error "Error ejecutando tests de Playwright: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    // Bloque post: acciones que se ejecutan siempre al finalizar el pipeline
    post {
        always {
            script {
                try {
                    // Detener el servidor HTTP si existe
                    sh '''
                    if [ -f server.pid ]; then
                        kill $(cat server.pid) || true
                        rm -f server.pid
                        echo "Servidor HTTP detenido"
                    fi
                    '''
                } catch (Exception e) {
                    echo "No se pudo detener el servidor: ${e.getMessage()}"
                }
            }
            // Publicar reportes de Playwright si existen
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: false,
                keepAll: true,
                reportDir: 'playwright-report',
                reportFiles: 'index.html',
                reportName: 'Playwright Test Report'
            ])
            // Limpiar archivos temporales y workspace
            cleanWs()
        }
    }
}